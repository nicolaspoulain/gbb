%Dossier : jeu de dominos
%Nicolas Poulain

%!postproc(md):  \\\[(.*?)\\\]   $$\1$$
%!preproc(tex): '^%tex% ' ''
%!preproc(md): '^%md% ' ''
% txt2tags-svn -t md dominos.t2t && pandoc --toc --number-sections --listings --smart --highlight-style=pygments --include-in-header=include.tex -s dominos.md -o dominos.tex && pdflatex dominos.tex && evince dominos.pdf

=Règles du jeu de dominos=

Le jeu de dominos est un jeu de société d'origine chinoise,
utilisant 28 pièces (dans le cas d'un jeu "double-six"), les
dominos. On peut adopter une des règles suivantes :

**Règle**
- Distribuer au hasard 10 des 28 dominos à chaque joueur.
- Celui qui a le domino le plus fort (ordre lexicographique) commence et pose celui-ci sur la table
- Chaque joueur pose tour à tour à l'une des extrémites du jeu sur la table
  un domino de sorte que les parties voisines ont le même nombre de points,
  constituant ainsi une chaîne.
- Le joueur qui ne peut pas jouer passe son tour, et on continue à
  jouer jusqu'à ce qu'un des joueurs se soit débarrassé de tous ses dominos,
  ou que le jeu soit complètement bloqué.
- À la fin du jeu, celui qui totalise le moins de points (la somme des points de l'ensemble des dominos) est le gagnant.
  On a donc tout intérêt à se débarrasser en premier des dominos valant beaucoup de points.


%**Variante**
%- Lorsqu'un joueur n'a pas de domino qui convienne, il pioche en prenant
%  une pièce du talon et passe son tour, c'est le suivant qui joue.
%- Le vainqueur est celui qui a placé le premier tous ses dominos.


[dominosuite.png]

==Le projet==

Le but de ce projet est de comparer différentes stratégies de jeu en opposant deux joueurs virtuels et en leur faisant jouer un grand nombre de parties. Lesdonnées statistiques recueillies sur le nombre de victoires nous conduiront déterminer la meilleure méthode pour gagner à ce jeu.


=Modélisation=

Un domino peut être représenté par un vecteur colonne
$\left(\begin{array}{c}x \\  y \end{array}\right)$ ou par un nombre $10x+y$.
Ainsi le jeu d'un joueur peut être représenté par la matrice (le tableau)

$J=\left(
\begin{array}{ccccccc}
 6 & 5 & 5 & 3 & 3 & 3 & 1 \\
 1 & 4 & 0 & 3 & 1 & 0 & 1 \\
\end{array}
\right)$ ou $J=(61,54,50,33,31,30,11)$.

==Premières fonctions==

Ce sont des fonctions qui ne servent pas directement au déroulement de la partie de dominos mais qui permettent sa mise en place ou qui sont indispensables en tant qu'outils pour les fonctions avancées.

+ Écrire la fonction ```creation_jeu``` capable de donner
 l'ensemble des dominos de la boîte de jeu.
\[\left(\begin{array}{cccccccccccccccccccccccccccc} 6 & 6 & 6 & 6 & 6 & 6 & 6 & 5 & 5 & 5 & 5 & 5 & 5 & 4 & 4 & 4 & 4 & 4 & 3 & 3 & 3 & 3 & 2 & 2 & 2 & 1 & 1 & 0 \\ 6 & 5 & 4 & 3 & 2 & 1 & 0 & 5 & 4 & 3 & 2 & 1 & 0 & 4 & 3 & 2 & 1 & 0 & 3 & 2 & 1 & 0 & 2 & 1 & 0 & 1 & 0 & 0 \\ \end{array}\right)\]
+ Écrire une fonction ```distribue``` qui tire au hasard (et sans remise) une main
 contenant un nombre donné de dominos.
+ Écrire une fonction ```est_avant``` qui admet comme paramètres d'entrée deux dominos
 et qui renvoie ```True``` ou ```False``` selon que les deux dominos sont ou pas classés
 dans l'ordre décroissant.
 Par exemple ```est_avant([6,2],[5,0])``` renverrait ```True```.
+ Écrire une fonction ```tri_decr``` qui trie un ensemble de dominos par ordre
 décroissant.


==Les fonctions concernant le déroulement de la partie==

Ces fonctions permettent d'initialiser la partie, d'enchaîner les tours de jeux, et de terminer la partie. Elles utilisent les fonctions citées précédemment à travers d'autres fonctions plus complexes. Les deux principales fonctions sont celle permettant de désigner le joueur qui posera le premier domino, et celle qui, grâce à une boucle, fait jouer les joueurs chacun leur tour.

+ Écrire une fonction ```is_player1_first``` qui indique si le joueur numéro 1 est ou pas celui qui commence la partie selon qu'il possède le domino le plus fort.
+ Écrire une fonction ```possibilites``` qui à partir de la chaîne de dominos se trouvant déjà sur la table et de la main d'un joueur, renvoie les choix possibles de dominos pour ce joueur.
 Par exemple , pour une table  constituée de la chaîne de dominos [3,4],[4,4], et pour une main constituée des dominos {[2,3],[1,5],[4,6]}, la fonction reverrait les nombres 0 et 2 qui sont les positions des deux dominos pouvant être placés sur la table.
+ Écrire une fonction ```positionne``` qui à partir d'une table et d'un domino qui peut être placé sur cette table (à l'un des deux bouts) renvoie la nouvelle table (avec le domino correctement placé).


==Les fonctions concernant les stratégies==

La stratégie d'un joueur est déterminée par le choix du domino à jouer lorsque plusieurs possibilités s'offrent.

Programmer les quatre stratégies suivantes :
+ ```strategie_pire``` : joue le domino placé en dernier dans l'ordre lexicographique ;
+ ```strategie_hasard``` :  joue un domino au hasard ;
+ ```strategie_plus_de_points``` : joue le domino qui vaut le plus de points ;
+ ```strategie_plus_present``` : joue le domino dont les valeurs sont les plus présentes dans la main (ainsi il garde plus de possibilités pour les tours à venir) ;


==Resultats==

En lançant un très grand nombre de parties entre deux stratégies à chaque fois, on espère obtenir une bonne estimation statistique pour comparer la qualité des stratégies.

La liste suivante donne pour chaque tournoi de 100000 parties, le nombre de nuls, et le nombre de victoires de chaque côté.
- ```hasard``` vs ```pire``` : ```[5826, 55470, 38704]```
- ```plus_present``` vs ```pire``` : ```[6411, 61752, 31837]```
- ```plus_present``` vs ```hasard``` ```[8398, 51217, 40385]```
- ```plus_de_points``` vs ```pire``` : ```[5384, 62743, 31873]```
- ```plus_de_points``` vs ```hasard``` : ```[8051, 56270, 35679]```
- ```plus_de_points``` vs ```plus_present``` : ```[9196, 51666, 39138]```

Ainsi on constate que comme on s'y attendait la stratégie ```pire``` est la moins efficace et que la stratégie ```hasard``` se place deuxième.
Ce qui était moins évident a priori, c'est que la stratégie élaborée ```plus_present``` consistant à tenter de conserver le plus de possibilités est finalement nettement moins intéressante que ```plus_de_points``` qui propose de se débarasser au plus vite des dominos les plus gros.


%tex% \begin{landscape}\begin{footnotesize}\begin{verbatim}
%md% \begin{landscape}\begin{footnotesize}\begin{verbatim}
```
--------Nouvelle partie---------
La main du Joueur 1 :  [[6, 6], [6, 2], [5, 4], [5, 3], [4, 2], [4, 1], [4, 0], [3, 2], [2, 0], [1, 1]]
La main du Joueur 2 :  [[6, 4], [5, 5], [5, 0], [4, 4], [4, 3], [3, 1], [3, 0], [2, 2], [1, 0], [0, 0]]

Joueur 1 joue :  [[6, 6]]
Joueur 2 joue :  [[4, 6], [6, 6]]
Joueur 1 joue :  [[2, 4], [4, 6], [6, 6]]
Joueur 2 joue :  [[2, 2], [2, 4], [4, 6], [6, 6]]
Joueur 1 joue :  [[0, 2], [2, 2], [2, 4], [4, 6], [6, 6]]
Joueur 2 joue :  [[0, 0], [0, 2], [2, 2], [2, 4], [4, 6], [6, 6]]
Joueur 1 joue :  [[4, 0], [0, 0], [0, 2], [2, 2], [2, 4], [4, 6], [6, 6]]
Joueur 2 joue :  [[3, 4], [4, 0], [0, 0], [0, 2], [2, 2], [2, 4], [4, 6], [6, 6]]
Joueur 1 joue :  [[2, 3], [3, 4], [4, 0], [0, 0], [0, 2], [2, 2], [2, 4], [4, 6], [6, 6]]
Joueur 2 passe.
Joueur 1 joue :  [[6, 2], [2, 3], [3, 4], [4, 0], [0, 0], [0, 2], [2, 2], [2, 4], [4, 6], [6, 6]]
Joueur 2 passe.
Joueur 1 passe.
La main du Joueur 1 :  [[5, 4], [5, 3], [4, 1], [1, 1]]
La main du Joueur 2 :  [[5, 5], [5, 0], [4, 4], [3, 1], [3, 0], [1, 0]]
le joueur 1 gagne.
--------Nouvelle partie---------
La main du Joueur 1 :  [[6, 6], [6, 4], [6, 3], [5, 2], [5, 1], [5, 0], [4, 4], [4, 3], [4, 1], [3, 1]]
La main du Joueur 2 :  [[6, 2], [6, 1], [6, 0], [5, 5], [5, 4], [4, 0], [3, 3], [3, 0], [2, 2], [2, 1]]

Joueur 1 joue :  [[6, 6]]
Joueur 2 joue :  [[0, 6], [6, 6]]
Joueur 1 joue :  [[0, 6], [6, 6], [6, 4]]
Joueur 2 joue :  [[3, 0], [0, 6], [6, 6], [6, 4]]
Joueur 1 joue :  [[3, 0], [0, 6], [6, 6], [6, 4], [4, 4]]
Joueur 2 joue :  [[3, 3], [3, 0], [0, 6], [6, 6], [6, 4], [4, 4]]
Joueur 1 joue :  [[1, 3], [3, 3], [3, 0], [0, 6], [6, 6], [6, 4], [4, 4]]
Joueur 2 joue :  [[2, 1], [1, 3], [3, 3], [3, 0], [0, 6], [6, 6], [6, 4], [4, 4]]
Joueur 1 joue :  [[2, 1], [1, 3], [3, 3], [3, 0], [0, 6], [6, 6], [6, 4], [4, 4], [4, 1]]
Joueur 2 joue :  [[2, 2], [2, 1], [1, 3], [3, 3], [3, 0], [0, 6], [6, 6], [6, 4], [4, 4], [4, 1]]
Joueur 1 joue :  [[2, 2], [2, 1], [1, 3], [3, 3], [3, 0], [0, 6], [6, 6], [6, 4], [4, 4], [4, 1], [1, 5]]
Joueur 2 joue :  [[2, 2], [2, 1], [1, 3], [3, 3], [3, 0], [0, 6], [6, 6], [6, 4], [4, 4], [4, 1], [1, 5], [5, 4]]
Joueur 1 joue :  [[2, 2], [2, 1], [1, 3], [3, 3], [3, 0], [0, 6], [6, 6], [6, 4], [4, 4], [4, 1], [1, 5], [5, 4], [4, 3]]
Joueur 2 joue :  [[6, 2], [2, 2], [2, 1], [1, 3], [3, 3], [3, 0], [0, 6], [6, 6], [6, 4], [4, 4], [4, 1], [1, 5], [5, 4], [4, 3]]
Joueur 1 joue :  [[3, 6], [6, 2], [2, 2], [2, 1], [1, 3], [3, 3], [3, 0], [0, 6], [6, 6], [6, 4], [4, 4], [4, 1], [1, 5], [5, 4], [4, 3]]
Joueur 2 passe.
Joueur 1 passe.
La main du Joueur 1 :  [[5, 2], [5, 0]]
La main du Joueur 2 :  [[6, 1], [5, 5], [4, 0]]
le joueur 1 gagne.
```
%tex% \end{verbatim}\end{footnotesize}\end{landscape}
%md% \end{verbatim}\end{footnotesize}\end{landscape}


==Programme Python==

%md% ```python
%!include: ``dominos.py``
%md% `````

Le code est disponible sur <http://code.google.com/p/npoulain>.

