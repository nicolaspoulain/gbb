<?php

/**
 * @file
 *
 * Un module de gestion de stages GAIA
 * des tables supplementaires sont ajoutees a la base de donnees Drupal :
 * - g_gaia : contient une fusion des tables gdisp et gmodu en incluant des renseignements issus 
 *   d'autres tables gaia.
 * - g_module : contient des rensiegnements complementaires sur les stages comme par exemple les
 *   sessions de formation, le journal de bord de la mise en place du stage etc.
 * - g_session : la table des sessions liant un module a un formateur pour une dtae precise.
 * - g_formateur : la table des formateurs assurant les stages.
 */


/**
* Implement hook_views_data().
*
* Describe table "gbb_session" so that it can be used by views
*/

function gaiabb_views_data() {
  $tableName = 'gbb_session';
  $data = array();
  $data[$tableName]['table']['group'] = t('gaiabbSessions');

  $data[$tableName]['table']['base'] = array(
          'field' => 'co_resp', 
          'title' => t('gaiabbSessions'), 
          'help' => t("Sessions de Gaiabb.")
          );
  $data[$tableName]['co_resp'] = array(
          'title' => t('co_resp'), 
          'help' => t('Numero de rep péda'), 
          'field' => array(
              'handler' => 'views_handler_field', 
              'click sortable' => TRUE,
              ), 
          'sort'     => array('handler' => 'views_handler_sort'), 
          'filter'   => array('handler' => 'views_handler_filter_string'), 
          'argument' => array('handler' => 'views_handler_argument_string'),
          ); 
  $data[$tableName]['co_modu'] = array(
          'title' => t('co_modu'), 
          'help' => t('Numero de module : co_modu'), 
          'field' => array(
              'handler' => 'views_handler_field', 
              'click sortable' => TRUE,
              ), 
          'sort'     => array('handler' => 'views_handler_sort'), 
          'filter'   => array('handler' => 'views_handler_filter_string'), 
          'argument' => array('handler' => 'views_handler_argument_string'),
          );
  $data[$tableName]['date'] = array(
          'title' => t('date'), 
          'help' => t('date de création'), 
          'field' => array(
              'handler' => 'views_handler_field_date', //'handler' => 'views_handler_field', 
              'click sortable' => TRUE,
              ), 
          'sort' => array('handler' => 'views_handler_sort_date'), 
          'filter' => array('handler' => 'date_views_filter_handler_simple'), 
          );

  $data[$tableName]['date_timestamp'] = array(
          'title' => t('date TS'), 
          'help' => t('date de création TS'), 
          'field' => array(
              'handler' => 'views_handler_field_date', //'handler' => 'views_handler_field', 
              'click sortable' => TRUE,
              ), 
          'sort' => array('handler' => 'views_handler_sort_date'), 
          'filter' => array('handler' => 'date_views_filter_handler_simple'), 
          );

 $data[$tableName]['table']['join'] = array(
          // Index this array by the table name to which this table refers.
          // 'left_field' is the primary key in the referenced table.
          // 'field' is the foreign key in this table.
          'gbb_gresp_dafor' => array(
              'left_field' => 'co_resp', 
              'field' => 'co_resp',
              ),
          );
  // Node ID table field.
  $data[$tableName]['coo_resp'] = array(
          'title' => t('co_resp--'), 
          'help' => t('le coresp--'),
          // Define a relationship to the {gbb_gresp_dafor} table, so example_table views can
          // add a relationship to gbb_gresp_dafor. If you want to define a relationship the
          // other direction, use hook_views_data_alter(), or use the 'implicit' join
          // method described above. 
          'relationship' => array(
              'base' => 'gbb_gresp_dafor', // The name of the table to join with. 
              'base field' => 'co_resp', // The name of the field on the joined table.
              'field' => 'co_resp', //-- see hook_views_data_alter(); not needed here. 
              'handler' => 'views_handler_relationship', 
              'label' => t('Default label for the relationship'), 
              'title' => t('Title shown when adding the relationship'), 
              'help' => t('More information on this relationship'),
              ),
          );

/*
// ---------------------------
// gbb_gresp_dafor table

  $tableName = 'gbb_gresp_dafor';

  $data[$tableName]['table']['group'] = t('gaiabbGrespDafor');

  $data[$tableName]['table']['base'] = array(
          'field' => 'co_ressp', 
          'title' => t('gaiabbGrespDafor'), 
          'help' => t("Resp. péda pour Gaiabb.")
          );
  $data[$tableName]['nomu'] = array(
          'title' => t('nomu'), 
          'help' => t('Nom du rep péda'), 
          'field' => array(
              'handler' => 'views_handler_field', 
              'click sortable' => TRUE,
              ), 
          'sort'     => array('handler' => 'views_handler_sort'), 
          'filter'   => array('handler' => 'views_handler_filter_string'), 
          'argument' => array('handler' => 'views_handler_argument_string'),
          ); 

*/

 return $data;
}


/**
* Implements hook_permission().
*
* Since the access to our new custom pages will be granted based on
* special permissions, we need to define what those permissions are here.
* This ensures that they are available to enable on the user role
* administration pages.
*/

function gaiabb_permission() {
  return array(
    'access gaiabb' => array(
      'title' => t('Accéder à GaiaBB'), 
      'description' => t('Gestion des modules, des formateurs et des établissements.'),
      ),
    'co_resp gaiabb' => array(
      'title' => t('Sélectionner co_resp'), 
      'description' => t('Afin de choisir le rôle (Interlocuteur, resp. orga. ou péda.) sur la page sta_par_resp d\'affichage de la liste des stages.'),
      ),
    'gest_sessions gaiabb' => array(
      'title' => t('Gérer les sessions d\'un module'), 
      'description' => t('Autorise à jouter, modifier, dupliquer ou supprimer des sessions.'),
      ),
    'gest_convocs gaiabb' => array(
      'title' => t('Gérer les convocations d\'un module'), 
      'description' => t('Autorise à marquer comme imprimées ou envoyées les convocations.'),
      ),
    'gest_etablissements gaiabb' => array(
      'title' => t('Ajouter un établissement dans la base de données'), 
      'description' => t('Permet aussi de modifier le RNE (l\'identifiant), le nom et le sigle. Les autres données sont modifiables par tous.'),
      ),
    'unstable gaiabb' => array(
      'title' => t('UNSTABLE'), 
      'description' => t('Donne accès aux fonctionnlités instables en cours de développement.'),
      ),
  );
}

/**
 * Implements hook_menu
 */

function gaiabb_menu() {
  $items = array();

  // Etant donnés une année (09,10,11,12,...), un co_degré (1 ou 2) et un co_tres (1,2 ou 3)
  // affichage de la liste des responsables des stages
  //   exemple : sta_par_resp/12/2/1
  // affichage de la liste des stages pour un co_resp donné
  //   exemple : sta_par_resp/12/2/1/1495

  $items['sta_par_resp'] = array(
        'title' => '',
        'page callback' => 'sta_par_resp',
        'access arguments' => array('access gaiabb'),
        'type' => MENU_CALLBACK,
  );

  // Etant donné un co_degré (1 ou 2)
  // Affiche la page de gestion du module co_modu
  //   exemple : gest_module/2/26142

  $items['gest_module'] = array(
        'title' => '',
        'page callback' => 'gest_module',
        'access arguments' => array('access gaiabb'),
        'type' => MENU_CALLBACK,
  );

  // Etant donné un id (112 ou 2222)
  // Affiche la page de gestion des formateurs
  //   exemple : formateur/112

  $items['formateur'] = array(
        'title' => '',
        'page callback' => 'formateur',
        'access arguments' => array('access gaiabb'),
        'type' => MENU_CALLBACK,
  );

  // Etant donné un id (112 ou 2222)
  // Affiche la page de gestion des établisssemnets
  //   exemple : etablissement/112

  $items['etablissement'] = array(
        'title' => '',
        'page callback' => 'etablissement',
        'access arguments' => array('access gaiabb'),
        'type' => MENU_CALLBACK,
  );

  // Pages pour autocomplete AJAX
  $items['autocomp/etablissement'] = array(
        'page callback' => '_gaiabb_autocompetab',
        'access arguments' => array('access gaiabb'),
        'type' => MENU_CALLBACK
  );
  $items['autocomp/formateur'] = array(
        'page callback' => '_gaiabb_autocompform',
        'access arguments' => array('access gaiabb'),
        'type' => MENU_CALLBACK
  );
  $items['autocomp/formateur2'] = array(
        'page callback' => '_gaiabb_autocompform2',
        'access arguments' => array('access gaiabb'),
        'type' => MENU_CALLBACK
  );
  $items['autocomp/responsable'] = array(
        'page callback' => '_gaiabb_autocompresp',
        'access arguments' => array('access gaiabb'),
        'type' => MENU_CALLBACK
  );
  $items['autocomp/stage'] = array(
        'page callback' => '_gaiabb_autocompstage',
        'access arguments' => array('access gaiabb'),
        'type' => MENU_CALLBACK
  );
  return $items;
}

module_load_include('inc', 'gaiabb', 'page_formateur');
module_load_include('inc', 'gaiabb', 'page_sta_par_resp');
module_load_include('inc', 'gaiabb', 'page_gest_module');
module_load_include('inc', 'gaiabb', 'page_gest_etab');
